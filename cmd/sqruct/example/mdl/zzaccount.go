// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import (
	"github.com/oov/q"
	"github.com/oov/sqruct"
)

// Account represents the following table.
// 	CREATE TABLE "account"(
// 		"id" INTEGER PRIMARY KEY AUTOINCREMENT,
// 		"name" VARCHAR(30) NOT NULL UNIQUE
// 	);
type Account struct {
	ID   int64  `mdl:"pk,notnull,uniq,default,autoincr"`
	Name string `mdl:"notnull,uniq"`
}

func GetAccount(db sqruct.DB, id int64) (*Account, error) {
	b, tbl := zzAccount{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), id),
	).ToSQL()
	var t Account
	err := db.QueryRow(sql, args...).Scan(zzAccount{}.Pointers(&t)...)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func (t *Account) SelectPost(db sqruct.DB) ([]Post, error) {
	b, tbl := zzPost{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.AccountID(), t.ID),
	).ToSQL()
	r, err := db.Query(sql, args...)
	if err != nil {
		return nil, err
	}
	defer r.Close()

	ot := []Post{}
	for r.Next() {
		var e Post
		if err = r.Scan(zzPost{}.Pointers(&e)...); err != nil {
			return nil, err
		}
		ot = append(ot, e)
	}
	if err = r.Err(); err != nil {
		return nil, err
	}
	return ot, nil
}

func (t *Account) Insert(db sqruct.DB) error {

	b, tbl := zzAccount{}.InsertBuilder(t)
	if !sqruct.IsZero(t.ID) {
		sql, args := b.Set(tbl.ID(), t.ID).ToSQL()
		_, err := db.Exec(sql, args...)
		return err
	}

	sql, args := b.ToSQL()
	r, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	var i int64
	if i, err = r.LastInsertId(); err != nil {
		return err
	}

	t.ID = i
	return nil

}

func (t *Account) Update(db sqruct.DB) error {
	b, tbl := zzAccount{}.UpdateBuilder(t)
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

func (t *Account) Delete(db sqruct.DB) error {
	b, tbl := zzAccount{}.DeleteBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

// zzAccount represents Account table schema.
type zzAccount struct{}

func (zzAccount) T(aliasName ...string) *zzAccountTable {
	return &zzAccountTable{q.T("account", aliasName...)}
}

func (zzAccount) Columns(b *q.ZSelectBuilder, t *zzAccountTable) {
	b.Column(
		t.ID(),
		t.Name(),
	)
}

func (zzAccount) Pointers(t *Account) []interface{} {
	return []interface{}{&t.ID, &t.Name}
}

func (zzAccount) InsertBuilder(t *Account) (*q.ZInsertBuilder, *zzAccountTable) {
	tbl := zzAccount{}.T()
	return q.Insert().Into(tbl).
		Set(tbl.Name(), t.Name).
		SetDialect(q.SQLite), tbl
}

func (zzAccount) SelectBuilder() (*q.ZSelectBuilder, *zzAccountTable) {
	tbl := zzAccount{}.T()
	b := q.Select().From(tbl).SetDialect(q.SQLite)
	zzAccount{}.Columns(b, tbl)
	return b, tbl
}

func (zzAccount) UpdateBuilder(t *Account) (*q.ZUpdateBuilder, *zzAccountTable) {
	tbl := zzAccount{}.T()
	return q.Update(tbl).
		Set(tbl.Name(), t.Name).
		SetDialect(q.SQLite), tbl
}

func (zzAccount) DeleteBuilder() (*q.ZDeleteBuilder, *zzAccountTable) {
	tbl := zzAccount{}.T()
	return q.Delete().From(tbl).SetDialect(q.SQLite), tbl
}

// zzAccountTable represents Account table.
type zzAccountTable struct{ q.Table }

func (t zzAccountTable) ID(aliasName ...string) q.Column {
	return t.Table.C("id", aliasName...)
}

func (t zzAccountTable) Name(aliasName ...string) q.Column {
	return t.Table.C("name", aliasName...)
}
