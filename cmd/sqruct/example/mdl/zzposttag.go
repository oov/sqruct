// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import (
	"github.com/oov/q"
	"github.com/oov/sqruct"
)

// PostTag represents the following table.
// 	CREATE TABLE "posttag"(
// 		"postid" INTEGER NOT NULL,
// 		"tagid" INTEGER NOT NULL,
// 		FOREIGN KEY (postid) REFERENCES post(id) ON DELETE CASCADE,
// 		FOREIGN KEY (tagid) REFERENCES tag(id) ON DELETE CASCADE,
// 		PRIMARY KEY (postid, tagid)
// 	);
type PostTag struct {
	PostID int64 `mdl:"fk,notnull"`
	TagID  int64 `mdl:"fk,notnull"`
}

func GetPostTag(db sqruct.DB, postID int64, tagID int64) (*PostTag, error) {
	b, tbl := zzPostTag{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.PostID(), postID),
		q.Eq(tbl.TagID(), tagID),
	).ToSQL()
	var t PostTag
	err := db.QueryRow(sql, args...).Scan(zzPostTag{}.Pointers(&t)...)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func (t *PostTag) GetPost(db sqruct.DB) (*Post, error) {
	b, tbl := zzPost{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.PostID),
	).ToSQL()
	var ot Post
	if err := db.QueryRow(sql, args...).Scan(zzPost{}.Pointers(&ot)...); err != nil {
		return nil, err
	}
	return &ot, nil
}

func (t *PostTag) GetTag(db sqruct.DB) (*Tag, error) {
	b, tbl := zzTag{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.TagID),
	).ToSQL()
	var ot Tag
	if err := db.QueryRow(sql, args...).Scan(zzTag{}.Pointers(&ot)...); err != nil {
		return nil, err
	}
	return &ot, nil
}

func (t *PostTag) Insert(db sqruct.DB) error {

	b, _ := zzPostTag{}.InsertBuilder(t)
	sql, args := b.ToSQL()
	_, err := db.Exec(sql, args...)
	return err

}

func (t *PostTag) Update(db sqruct.DB) error {
	// PostTag has primary key only
	return nil
}

func (t *PostTag) Delete(db sqruct.DB) error {
	b, tbl := zzPostTag{}.DeleteBuilder()
	sql, args := b.Where(
		q.Eq(tbl.PostID(), t.PostID),
		q.Eq(tbl.TagID(), t.TagID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

// zzPostTag represents PostTag table schema.
type zzPostTag struct{}

func (zzPostTag) T(aliasName ...string) *zzPostTagTable {
	return &zzPostTagTable{q.T("posttag", aliasName...)}
}

func (zzPostTag) Columns(b *q.ZSelectBuilder, t *zzPostTagTable) {
	b.Column(
		t.PostID(),
		t.TagID(),
	)
}

func (zzPostTag) Pointers(t *PostTag) []interface{} {
	return []interface{}{&t.PostID, &t.TagID}
}

func (zzPostTag) InsertBuilder(t *PostTag) (*q.ZInsertBuilder, *zzPostTagTable) {
	tbl := zzPostTag{}.T()
	return q.Insert().Into(tbl).
		Set(tbl.PostID(), t.PostID).
		Set(tbl.TagID(), t.TagID).
		SetDialect(q.SQLite), tbl
}

func (zzPostTag) SelectBuilder() (*q.ZSelectBuilder, *zzPostTagTable) {
	tbl := zzPostTag{}.T()
	b := q.Select().From(tbl).SetDialect(q.SQLite)
	zzPostTag{}.Columns(b, tbl)
	return b, tbl
}

func (zzPostTag) UpdateBuilder(t *PostTag) (*q.ZUpdateBuilder, *zzPostTagTable) {
	tbl := zzPostTag{}.T()
	return q.Update(tbl).
		SetDialect(q.SQLite), tbl
}

func (zzPostTag) DeleteBuilder() (*q.ZDeleteBuilder, *zzPostTagTable) {
	tbl := zzPostTag{}.T()
	return q.Delete().From(tbl).SetDialect(q.SQLite), tbl
}

// zzPostTagTable represents PostTag table.
type zzPostTagTable struct{ q.Table }

func (t zzPostTagTable) PostID(aliasName ...string) q.Column {
	return t.Table.C("postid", aliasName...)
}

func (t zzPostTagTable) TagID(aliasName ...string) q.Column {
	return t.Table.C("tagid", aliasName...)
}
