// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import (
	"time"

	"github.com/oov/q"
	"github.com/oov/sqruct"
)

// Post represents the following table.
// 	CREATE TABLE "post"(
// 		"id" INTEGER PRIMARY KEY,
// 		"accountid" INTEGER NOT NULL,
// 		"at" DATETIME NOT NULL,
// 		"message" VARCHAR(8125) NOT NULL,
// 		FOREIGN KEY (accountid) REFERENCES account(id) ON DELETE CASCADE
// 	);
type Post struct {
	ID        int64     `mdl:"pk,notnull,uniq,default,autoincr"`
	AccountID int64     `mdl:"fk,notnull"`
	At        time.Time `mdl:"notnull"`
	Message   string    `mdl:"notnull"`
}

func GetPost(db sqruct.DB, id int64) (*Post, error) {
	b, tbl := zzPost{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), id),
	).ToSQL()
	var t Post
	err := db.QueryRow(sql, args...).Scan(zzPost{}.Pointers(&t)...)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func (t *Post) GetAccount(db sqruct.DB) (*Account, error) {
	b, tbl := zzAccount{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.AccountID),
	).ToSQL()
	var ot Account
	if err := db.QueryRow(sql, args...).Scan(zzAccount{}.Pointers(&ot)...); err != nil {
		return nil, err
	}
	return &ot, nil
}

func (t *Post) SelectPostTag(db sqruct.DB) ([]PostTag, error) {
	b, tbl := zzPostTag{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.PostID(), t.ID),
	).ToSQL()
	r, err := db.Query(sql, args...)
	if err != nil {
		return nil, err
	}
	defer r.Close()

	ot := []PostTag{}
	for r.Next() {
		var e PostTag
		if err = r.Scan(zzPostTag{}.Pointers(&e)...); err != nil {
			return nil, err
		}
		ot = append(ot, e)
	}
	if err = r.Err(); err != nil {
		return nil, err
	}
	return ot, nil
}

func (t *Post) SelectTag(db sqruct.DB) ([]Tag, []PostTag, error) {
	b, relTbl, _ := zzPost{}.SelectBuilderForTag()
	sql, args := b.Where(
		q.Eq(relTbl.PostID(), t.ID),
	).ToSQL()
	r, err := db.Query(sql, args...)
	if err != nil {
		return nil, nil, err
	}
	defer r.Close()

	ot, rt := []Tag{}, []PostTag{}
	for r.Next() {
		var oe Tag
		var re PostTag
		if err = r.Scan(append(zzPostTag{}.Pointers(&re), zzTag{}.Pointers(&oe)...)...); err != nil {
			return nil, nil, err
		}
		ot, rt = append(ot, oe), append(rt, re)
	}
	if err = r.Err(); err != nil {
		return nil, nil, err
	}
	return ot, rt, nil
}

func (t *Post) Insert(db sqruct.DB) error {

	b, tbl := zzPost{}.InsertBuilder(t)
	if !sqruct.IsZero(t.ID) {
		sql, args := b.Set(tbl.ID(), t.ID).ToSQL()
		_, err := db.Exec(sql, args...)
		return err
	}

	sql, args := b.ToSQL()
	r, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	var i int64
	if i, err = r.LastInsertId(); err != nil {
		return err
	}

	t.ID = i
	return nil

}

func (t *Post) Update(db sqruct.DB) error {
	b, tbl := zzPost{}.UpdateBuilder(t)
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

func (t *Post) Delete(db sqruct.DB) error {
	b, tbl := zzPost{}.DeleteBuilder()
	sql, args := b.Where(
		q.Eq(tbl.ID(), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

// zzPost represents Post table schema.
type zzPost struct{}

func (zzPost) T(aliasName ...string) *zzPostTable {
	return &zzPostTable{q.T("post", aliasName...)}
}

func (zzPost) Columns(b *q.ZSelectBuilder, t *zzPostTable) {
	b.Column(
		t.ID(),
		t.AccountID(),
		t.At(),
		t.Message(),
	)
}

func (zzPost) Pointers(t *Post) []interface{} {
	return []interface{}{&t.ID, &t.AccountID, &t.At, &t.Message}
}

func (zzPost) InsertBuilder(t *Post) (*q.ZInsertBuilder, *zzPostTable) {
	tbl := zzPost{}.T()
	return q.Insert().Into(tbl).
		Set(tbl.AccountID(), t.AccountID).
		Set(tbl.At(), t.At).
		Set(tbl.Message(), t.Message).
		SetDialect(q.SQLite), tbl
}

func (zzPost) SelectBuilder() (*q.ZSelectBuilder, *zzPostTable) {
	tbl := zzPost{}.T()
	b := q.Select().From(tbl).SetDialect(q.SQLite)
	zzPost{}.Columns(b, tbl)
	return b, tbl
}

func (zzPost) SelectBuilderForTag() (b *q.ZSelectBuilder, postTag *zzPostTagTable, tag *zzTagTable) {
	b, relTbl := zzPostTag{}.SelectBuilder()
	oTbl := zzTag{}.T()
	relTbl.InnerJoin(
		oTbl,
		q.Eq(relTbl.TagID(), oTbl.ID()),
	)
	zzTag{}.Columns(b, oTbl)
	return b, relTbl, oTbl
}

func (zzPost) UpdateBuilder(t *Post) (*q.ZUpdateBuilder, *zzPostTable) {
	tbl := zzPost{}.T()
	return q.Update(tbl).
		Set(tbl.AccountID(), t.AccountID).
		Set(tbl.At(), t.At).
		Set(tbl.Message(), t.Message).
		SetDialect(q.SQLite), tbl
}

func (zzPost) DeleteBuilder() (*q.ZDeleteBuilder, *zzPostTable) {
	tbl := zzPost{}.T()
	return q.Delete().From(tbl).SetDialect(q.SQLite), tbl
}

// zzPostTable represents Post table.
type zzPostTable struct{ q.Table }

func (t zzPostTable) ID(aliasName ...string) q.Column {
	return t.Table.C("id", aliasName...)
}

func (t zzPostTable) AccountID(aliasName ...string) q.Column {
	return t.Table.C("accountid", aliasName...)
}

func (t zzPostTable) At(aliasName ...string) q.Column {
	return t.Table.C("at", aliasName...)
}

func (t zzPostTable) Message(aliasName ...string) q.Column {
	return t.Table.C("message", aliasName...)
}
