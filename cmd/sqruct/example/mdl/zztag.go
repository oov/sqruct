// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import (
	"github.com/oov/q"
	"github.com/oov/sqruct"
)

// Tag represents the following table.
// 	CREATE TABLE "tag"(
// 		"id" INTEGER PRIMARY KEY,
// 		"name" VARCHAR(30) NOT NULL UNIQUE
// 	);
type Tag struct {
	ID   int64  `mdl:"pk,notnull,uniq,default,autoincr"`
	Name string `mdl:"notnull,uniq"`
}

func GetTag(db sqruct.DB, id int64) (*Tag, error) {
	b, tbl := zzTag{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.C("id"), id),
	).ToSQL()
	var t Tag
	err := db.QueryRow(sql, args...).Scan(&t.ID, &t.Name)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func (t *Tag) SelectPostTag(db sqruct.DB) ([]PostTag, error) {
	b, tbl := zzPostTag{}.SelectBuilder()
	sql, args := b.Where(
		q.Eq(tbl.C("tagid"), t.ID),
	).ToSQL()
	r, err := db.Query(sql, args...)
	if err != nil {
		return nil, err
	}
	defer r.Close()

	ot := []PostTag{}
	for r.Next() {
		var e PostTag
		if err = r.Scan(zzPostTag{}.Pointers(&e)...); err != nil {
			return nil, err
		}
		ot = append(ot, e)
	}
	if err = r.Err(); err != nil {
		return nil, err
	}
	return ot, nil
}

func (t *Tag) SelectPost(db sqruct.DB) ([]Post, []PostTag, error) {
	b, relTbl, _ := zzTag{}.SelectBuilderForPost()
	sql, args := b.Where(
		q.Eq(relTbl.C("tagid"), t.ID),
	).ToSQL()
	r, err := db.Query(sql, args...)
	if err != nil {
		return nil, nil, err
	}
	defer r.Close()

	ot, rt := []Post{}, []PostTag{}
	for r.Next() {
		var oe Post
		var re PostTag
		if err = r.Scan(append(zzPostTag{}.Pointers(&re), zzPost{}.Pointers(&oe)...)...); err != nil {
			return nil, nil, err
		}
		ot, rt = append(ot, oe), append(rt, re)
	}
	if err = r.Err(); err != nil {
		return nil, nil, err
	}
	return ot, rt, nil
}

func (t *Tag) Insert(db sqruct.DB) error {

	b, tbl := zzTag{}.InsertBuilder(t)
	if !sqruct.IsZero(t.ID) {
		sql, args := b.Set(tbl.C("id"), t.ID).ToSQL()
		_, err := db.Exec(sql, args...)
		return err
	}

	sql, args := b.ToSQL()
	r, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	var i int64
	if i, err = r.LastInsertId(); err != nil {
		return err
	}

	t.ID = i
	return nil

}

func (t *Tag) Update(db sqruct.DB) error {
	b, tbl := zzTag{}.UpdateBuilder(t)
	sql, args := b.Where(
		q.Eq(tbl.C("id"), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

func (t *Tag) Delete(db sqruct.DB) error {
	b, tbl := zzTag{}.DeleteBuilder()
	sql, args := b.Where(
		q.Eq(tbl.C("id"), t.ID),
	).ToSQL()
	_, err := db.Exec(sql, args...)
	return err
}

// zzTag represents Tag table schema.
type zzTag struct{}

func (zzTag) Columns(b *q.ZSelectBuilder, t q.Table) {
	b.Column(
		t.C("id"),
		t.C("name"),
	)
}

func (zzTag) Pointers(t *Tag) []interface{} {
	return []interface{}{&t.ID, &t.Name}
}

func (zzTag) InsertBuilder(t *Tag) (*q.ZInsertBuilder, q.Table) {
	tbl := q.T("tag")
	return q.Insert().Into(tbl).
		Set(tbl.C("name"), t.Name).
		SetDialect(q.SQLite), tbl
}

func (zzTag) SelectBuilder() (*q.ZSelectBuilder, q.Table) {
	tbl := q.T("tag")
	b := q.Select().From(tbl).SetDialect(q.SQLite)
	zzTag{}.Columns(b, tbl)
	return b, tbl
}

func (zzTag) SelectBuilderForPost() (b *q.ZSelectBuilder, postTag q.Table, post q.Table) {
	b, relTbl := zzPostTag{}.SelectBuilder()
	oTbl := q.T("post")
	relTbl.InnerJoin(
		oTbl,
		q.Eq(relTbl.C("postid"), oTbl.C("id")),
	)
	zzPost{}.Columns(b, oTbl)
	return b, relTbl, oTbl
}

func (zzTag) UpdateBuilder(t *Tag) (*q.ZUpdateBuilder, q.Table) {
	tbl := q.T("tag")
	return q.Update(tbl).
		Set(tbl.C("name"), t.Name).
		SetDialect(q.SQLite), tbl
}

func (zzTag) DeleteBuilder() (*q.ZDeleteBuilder, q.Table) {
	tbl := q.T("tag")
	return q.Delete().From(tbl).SetDialect(q.SQLite), tbl
}
