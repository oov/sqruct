// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import (
	"time"

	"github.com/oov/sqruct"
)

// Post represents the following table.
// 	CREATE TABLE post(
// 		id INTEGER PRIMARY KEY,
// 		accountid INTEGER NOT NULL,
// 		at DATETIME NOT NULL,
// 		message VARCHAR(8125) NOT NULL,
// 		FOREIGN KEY (accountid) REFERENCES account(id) ON DELETE CASCADE
// 	);
type Post struct {
	schema    zzPost
	ID        int64     `mdl:"pk,notnull,uniq,default,autoincr"`
	AccountID int64     `mdl:"fk,notnull"`
	At        time.Time `mdl:"notnull"`
	Message   string    `mdl:"notnull"`
}

func GetPost(db sqruct.DB, id int64) (*Post, error) {

	var t Post
	err := db.QueryRow(
		"SELECT id, accountid, at, message FROM post WHERE (id = ?)",
		id,
	).Scan(&t.ID, &t.AccountID, &t.At, &t.Message)
	if err != nil {
		return nil, err
	}
	return &t, nil

}

func (t *Post) GetAccount(db sqruct.DB) (*Account, error) {

	var ot Account
	err := db.QueryRow(
		"SELECT id, name FROM account WHERE (id = ?)",
		t.AccountID,
	).Scan(&ot.ID, &ot.Name)
	if err != nil {
		return nil, err
	}
	return &ot, nil

}

func (t *Post) SelectPostTag(db sqruct.DB) ([]PostTag, error) {

	r, err := db.Query(
		"SELECT postid, tagid FROM posttag WHERE (postid = ?)",
		t.ID,
	)
	if err != nil {
		return nil, err
	}
	defer r.Close()

	ot := []PostTag{}
	for r.Next() {
		var e PostTag
		if err = r.Scan(&e.PostID, &e.TagID); err != nil {
			return nil, err
		}
		ot = append(ot, e)
	}
	if err = r.Err(); err != nil {
		return nil, err
	}
	return ot, nil

}

func (t *Post) Insert(db sqruct.DB) error {

	i, err := t.schema.Mode().Insert(db, t.schema.TableName(), t.schema.Columns(), t.schema.Values(t), t.schema.AutoIncrementColumnIndex())
	if err != nil {
		return err
	}
	if i != 0 {
		t.ID = i
	}
	return nil

}

func (t *Post) Update(db sqruct.DB) error {

	_, err := db.Exec(
		"UPDATE post SET accountid = ?, at = ?, message = ? WHERE (id = ?)",
		t.AccountID, t.At, t.Message,
		t.ID,
	)
	return err

}

func (t *Post) Delete(db sqruct.DB) error {

	_, err := db.Exec(
		"DELETE FROM post WHERE (id = ?)",
		t.ID,
	)
	return err

}

// zzPost represents Post table schema.
type zzPost struct{}

func (zzPost) TableName() string {
	return "post"
}

func (zzPost) Columns() []string {
	return []string{"id", "accountid", "at", "message"}
}

func (zzPost) AutoIncrementColumnIndex() int {
	return 0
}

func (zzPost) Values(t *Post) []interface{} {
	return []interface{}{t.ID, t.AccountID, t.At, t.Message}
}

func (zzPost) Pointers(t *Post) []interface{} {
	return []interface{}{&t.ID, &t.AccountID, &t.At, &t.Message}
}

func (zzPost) Mode() sqruct.Mode {
	return sqruct.SQLite
}
