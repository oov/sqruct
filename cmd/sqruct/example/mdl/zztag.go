// DO NOT EDIT. This file was auto-generated by Sqruct.

package mdl

import "github.com/oov/sqruct"

// Tag represents the following table.
// 	CREATE TABLE tag(
// 		id INTEGER PRIMARY KEY,
// 		name VARCHAR(30) NOT NULL UNIQUE
// 	);
type Tag struct {
	schema zzTag
	ID     int64  `mdl:"pk,notnull,uniq,default,autoincr"`
	Name   string `mdl:"notnull,uniq"`
}

func GetTag(db sqruct.DB, id int64) (*Tag, error) {

	var t Tag
	err := db.QueryRow(
		"SELECT id, name FROM tag WHERE (id = ?)",
		id,
	).Scan(&t.ID, &t.Name)
	if err != nil {
		return nil, err
	}
	return &t, nil

}

func (t *Tag) SelectPostTag(db sqruct.DB) ([]PostTag, error) {

	r, err := db.Query(
		"SELECT postid, tagid FROM posttag WHERE (tagid = ?)",
		t.ID,
	)
	if err != nil {
		return nil, err
	}
	defer r.Close()

	ot := []PostTag{}
	for r.Next() {
		var e PostTag
		if err = r.Scan(&e.PostID, &e.TagID); err != nil {
			return nil, err
		}
		ot = append(ot, e)
	}
	if err = r.Err(); err != nil {
		return nil, err
	}
	return ot, nil

}

func (t *Tag) SelectPost(db sqruct.DB) ([]Post, []PostTag, error) {

	r, err := db.Query(
		"SELECT post.id, post.accountid, post.at, post.message, posttag.postid, posttag.tagid FROM posttag, post WHERE (posttag.tagid = ?)AND(posttag.postid = post.id)",
		t.ID,
	)
	if err != nil {
		return nil, nil, err
	}
	defer r.Close()

	ot, rt := []Post{}, []PostTag{}
	for r.Next() {
		var oe Post
		var re PostTag
		if err = r.Scan(&oe.ID, &oe.AccountID, &oe.At, &oe.Message, &re.PostID, &re.TagID); err != nil {
			return nil, nil, err
		}
		ot, rt = append(ot, oe), append(rt, re)
	}
	if err = r.Err(); err != nil {
		return nil, nil, err
	}
	return ot, rt, nil
}

func (t *Tag) Insert(db sqruct.DB) error {

	i, err := t.schema.Mode().Insert(db, t.schema.TableName(), t.schema.Columns(), t.schema.Values(t), t.schema.AutoIncrementColumnIndex())
	if err != nil {
		return err
	}
	if i != 0 {
		t.ID = i
	}
	return nil

}

func (t *Tag) Update(db sqruct.DB) error {

	_, err := db.Exec(
		"UPDATE tag SET name = ? WHERE (id = ?)",
		t.Name,
		t.ID,
	)
	return err

}

func (t *Tag) Delete(db sqruct.DB) error {

	_, err := db.Exec(
		"DELETE FROM tag WHERE (id = ?)",
		t.ID,
	)
	return err

}

// zzTag represents Tag table schema.
type zzTag struct{}

func (zzTag) TableName() string {
	return "tag"
}

func (zzTag) Columns() []string {
	return []string{"id", "name"}
}

func (zzTag) AutoIncrementColumnIndex() int {
	return 0
}

func (zzTag) Values(t *Tag) []interface{} {
	return []interface{}{t.ID, t.Name}
}

func (zzTag) Pointers(t *Tag) []interface{} {
	return []interface{}{&t.ID, &t.Name}
}

func (zzTag) Mode() sqruct.Mode {
	return sqruct.SQLite
}
